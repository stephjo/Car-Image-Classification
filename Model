import torch.backends.cudnn as cudnn
import torch.nn as nn
import torch.optim as optim
import torch.utils.data as data
from torch.autograd import Variable
import torchvision.utils
import torch
import os
from torchvision import models


def load_weights( model,base_file):
    other, ext = os.path.splitext(base_file)
    if ext == '.pkl' or '.pth':
        print('Loading weights into state dict...')
        model.load_state_dict(torch.load(base_file,
                                        map_location=lambda storage, loc: storage))
        print('Finished!')
    else:
        print('Sorry only .pth and .pkl files supported.')

def build_resnet(phase='train',num_classes=196,size=224):
    res_net = models.resnet152(pretrained=True)

    for param in res_net.parameters():
        param.requires_grad = False

    n_inputs = res_net.fc.in_features
  
    res_net.fc = nn.Sequential(
        nn.Linear(n_inputs,num_classes), nn.LogSoftmax(dim=1))
    return res_net
